<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
xmlns:beans="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<http pattern="/css/**" security="none" />
	<http pattern="/images/**" security="none" />
	<http pattern="/js/**" security="none" />
	<http pattern="/resources/**" security="none" />
	
	<http auto-config='true' use-expressions="true">
		
		<csrf disabled="true" />
		
		<!-- 초기 페이지 -->
		<intercept-url pattern="/" access="permitAll" />
		
		<!-- ajax 로그인 체크 페이지 -->
		<intercept-url pattern="/logincheck" access="permitAll" />
		
		<!-- SSO 로그인 관련 -->
		<intercept-url pattern="/ssologin.do" access="permitAll" />
		<intercept-url pattern="/ssologin_end.do" access="permitAll" />
		
		<!-- 사용자 비밀번호 초기화 -->
		<intercept-url pattern="/user/pwdchg/user_reset_pwd.do" access="permitAll" />

		<!-- 허니트랩 연동 -->
		<intercept-url pattern="/rest/honey" access="permitAll" />

		<!-- ip 로 tb_ip_dtl_info read 연동 -->
		<intercept-url pattern="/rest/api/**" access="permitAll" />
		
		<!-- ip 로 tb_ipzonecode read 연동 -->
		<intercept-url pattern="/rest/apisub/**" access="permitAll" />
		
		<!-- 테스트 로그인(운영시 삭제) -->
		<!-- <intercept-url pattern="/testlogin.do" access="permitAll" /> -->
		
		<!-- 패스워드 변경 -->
		<intercept-url pattern="/user/pwdchg/**"  access="isAuthenticated()" />
		
		<!-- IP대역 조회 -->
		<intercept-url pattern="/ipzone/**"  access="hasAnyRole('ROLE_USER_3','ROLE_USER_4','ROLE_USER_5')" />
		
		<!-- IP대역 구분명 조회 -->
		<intercept-url pattern="/ipmng/ipzcm/searchzonecd.do"  access="hasAnyRole('ROLE_USER_3','ROLE_USER_4','ROLE_USER_5')" />
		
		<!-- 엑셀 양식 다운로드 -->
		<intercept-url pattern="/download/**"  access="hasAnyRole('ROLE_USER_4','ROLE_USER_5')" />
		
		<!-- IP 인수 및 인계 승인 -->
		<intercept-url pattern="/ipmng/ipta/**"  access="isAuthenticated()" />
		
		<!-- IP 정보 수정 -->
		<intercept-url pattern="/ipmng/ipim/modify_ip_info.do"  access="isAuthenticated()" />
		
		<!-- IP 정보 조회 및 변경 -->
		<intercept-url pattern="/ipmng/ipim/**"  access="hasAnyRole('ROLE_USER_3','ROLE_USER_4','ROLE_USER_5')" />
		
		<!-- IP 관리 나머지 -->
		<intercept-url pattern="/ipmng/**"  access="hasAnyRole('ROLE_USER_4','ROLE_USER_5')" />
		
		<!-- 담당자 찾기 -->
		<intercept-url pattern="/user/usermng/searchperson.do"  access="isAuthenticated()" />

		<!-- 유저 관리 -->
		<intercept-url pattern="/user/usermng/**"  access="hasAnyRole('ROLE_USER_5')" />
		
		<!-- 부서 권한 관리 -->
		<intercept-url pattern="/user/deptmng/**"  access="hasAnyRole('ROLE_USER_5')" />
		
		<!-- 메인페이지 -->
		<intercept-url pattern="/main.do"  access="isAuthenticated()" />
		
		<!-- 다른 페이지 권한 -->
		<intercept-url pattern="/**"  access="isAuthenticated() and hasAnyRole('ROLE_USER')" />
	
		<form-login login-page="/" login-processing-url="/login"
			default-target-url="/main.do" always-use-default-target="true"
			authentication-failure-url="/?result=false"
			/>
		<logout logout-url="/logout"  logout-success-url="/"/>
		
		<access-denied-handler error-page="/errorPage.do" />
		
		<anonymous />
	</http>

	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<beans:bean id="customAuthenticationProvider" class="ipmn.web.main.CustomAuthenticationProvider" />
	<authentication-manager>
		<authentication-provider ref="customAuthenticationProvider" />
	</authentication-manager>
	
	
	<!-- <jdbc-user-service id="jdbcUserService" data-source-ref="dataSource" users-by-username-query="
		select login_user_id as username,
				    user_pwd as password,
		                         enabled 
		  from (
		          select LOGIN_USER_ID AS LOGIN_USER_ID
		                ,USER_PWD AS USER_PWD
		                ,ENABLED AS ENABLED
		                from tb_stuser where USE_FLAG = '0' 
		
		          union 
		          select p.EMPNO AS LOGIN_USER_ID
		                ,'' AS USER_PWD
		                ,'1' AS ENABLED
		                from (inf_person_info_rcv p join tb_dept d) 
		                where ((p.INDEPT = d.INDEPT) and (p.T_FLAG not in ('D')))
		        ) A
		where upper(A.login_user_id) = upper(?)
		limit 1"
				 
	   authorities-by-username-query="
		select login_user_id as username,
			                  authority 
		  from (
		          select LOGIN_USER_ID AS LOGIN_USER_ID
		                ,AUTHORITY AS authority
		                from tb_stuser where (USE_FLAG = '0') 
		
		          union 
		          select p.EMPNO AS LOGIN_USER_ID
		                ,'ROLE_ADMIN' AS authority
		                from (inf_person_info_rcv p join tb_dept d) 
		                where ((p.INDEPT = d.INDEPT) and (p.T_FLAG  not in ('D')))
		        ) A
        where A.login_user_id=upper(?)
        limit 1 "
	 />
			
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="preAuthProvider" />
		<authentication-provider user-service-ref="jdbcUserService">
			<password-encoder hash="sha-256"/>hash="sha-256"  -> 암호화 방식을 설정
  		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="preAuthProvider"
		class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<beans:property name="preAuthenticatedUserDetailsService">
			<beans:bean id="userDetailsServiceWrapper"
				class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<beans:property name="userDetailsService" ref="jdbcUserService" />
			</beans:bean>
		</beans:property>
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	<beans:bean id="securityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository">
		<beans:property name="allowSessionCreation" value="false" />
	</beans:bean>
	
	
 	<beans:bean id="siteminderFilter"
		class="org.springframework.security.web.authentication.preauth.RequestHeaderAuthenticationFilter">
		<beans:property name="principalRequestHeader" value="SM_USER" />
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="exceptionIfHeaderMissing" value="false"/>
	</beans:bean> -->
	
</beans:beans>